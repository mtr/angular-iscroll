/**
 * @license angular-iscroll v3.7.0, 2019-10-25T20:45:26+0200
 * (c) 2019 Martin Thorsen Ranang <mtr@ranang.org>
 * License: MIT
 */
!function(e,r){"function"==typeof define&&define.amd?define(["iscroll","platform"],r):"object"==typeof exports?module.exports=r(require("iscroll"),require("platform")):e.angularIscroll=r(e.IScroll,e.platform)}(this,function(h,a){"use strict";e.$inject=["$rootScope","$timeout","$interval","iScrollSignals","iScrollService"];var g={on:"iscroll-on",off:"iscroll-off"},S={},c=angular.isDefined(a)&&function(e){if("Opera Mini"===e.name)return!1;if("IE Mobile"===e.name)return 0<=s(e.version,"11.0");switch(e.os.family){case"Android":return function(e){return"Chrome Mobile"===e.name}(e)||function(e){return 0<=s(e.os.version,"4.0.4")}(e);case"iOS":return 0<=s(e.version,"5.1");default:return!0}}(a);
/**
     * Compares two software version numbers (e.g. "1.7.1" or "1.2b").
     *
     * This function was born in http://stackoverflow.com/a/6832721.
     *
     * @param {string} v1 The first version to be compared.
     * @param {string} v2 The second version to be compared.
     * @param {object} [options] Optional flags that affect comparison behavior:
     * <ul>
     *     <li>
     *         <tt>lexicographical: true</tt> compares each part of the version strings lexicographically instead of
     *         naturally; this allows suffixes such as "b" or "dev" but will cause "1.10" to be considered smaller than
     *         "1.2".
     *     </li>
     *     <li>
     *         <tt>zeroExtend: true</tt> changes the result if one version string has less parts than the other. In
     *         this case the shorter string will be padded with "zero" parts instead of being considered smaller.
     *     </li>
     * </ul>
     * @returns {number|NaN}
     * <ul>
     *    <li>0 if the versions are equal</li>
     *    <li>a negative integer iff v1 < v2</li>
     *    <li>a positive integer iff v1 > v2</li>
     *    <li>NaN if either version string is in the wrong format</li>
     * </ul>
     *
     * @copyright by Jon Papaioannou (["john", "papaioannou"].join(".") + "@gmail.com")
     * @license This function is in the public domain. Do what you want with it, no strings attached.
     */function s(e,r,n){var l=n&&n.lexicographical,i=n&&n.zeroExtend,t=e.split("."),o=r.split(".");function a(e){return(l?/^\d+[A-Za-z]*$/:/^\d+$/).test(e)}if(!t.every(a)||!o.every(a))return NaN;if(i){for(;t.length<o.length;)t.push("0");for(;o.length<t.length;)o.push("0")}l||(t=t.map(Number),o=o.map(Number));for(var c=0;c<t.length;++c){if(o.length==c)return 1;if(t[c]!=o[c])return t[c]>o[c]?1:-1}return t.length!=o.length?-1:0}function p(e){e()}function e(u,n,f,d,o){function v(e,r){n(function(){e.refresh()},r.directive.asyncRefreshDelay,r.directive.invokeApply)}return{restrict:"A",link:function(e,r,n){var l={iScroll:angular.extend({},o.defaults.iScroll,e.iscroll||{}),directive:angular.extend({},o.defaults.directive)};function i(){r.hasClass(g.on)||function(e,r,n,l){var i=new h(r[0],l.iScroll),t=!0,o=null;function a(){null!==o&&f.cancel(o),angular.isDefined(e.iscrollInstance)&&delete e.iscrollInstance,i.destroy(),r.removeClass(g.on).addClass(g.off),r.children(".iscroll-scroller").attr("style",null),angular.forEach(s,p)}function c(){t&&(t=!1,v(i,l),t=!0)}angular.forEach(S,function(e,r){angular.isDefined(l.directive[r])&&i.on(e,l.directive[r])}),r.removeClass(g.off).addClass(g.on),angular.isDefined(n.iscrollInstance)&&(e.iscrollInstance=i),!1!==l.directive.asyncRefreshDelay&&v(i,l),i.on("scrollStart",function(){t=!1}),i.on("scrollEnd",function(){t=!0}),!1!==l.directive.refreshInterval&&(o=f(c,l.directive.refreshInterval,0,l.directive.invokeApply));var s=[u.$on(d.disabled,a),u.$on(d.refresh,c),e.$on("$destroy",a)]}(e,r,n,l)}angular.forEach(l.iScroll,function(e,r){(o.defaults.directive.hasOwnProperty(r)||S.hasOwnProperty(r))&&(l.directive[r]=e,delete l.iScroll[r])});var t=[u.$on(d.enabled,i)];o.state.useIScroll?i():r.removeClass(g.on).addClass(g.off),e.$on("$destroy",function(){angular.forEach(t,p)})},scope:{iscroll:"=",iscrollInstance:"="}}}return angular.forEach(["beforeScrollStart","scrollCancel","scrollStart","scroll","scrollEnd","flick","zoomStart","zoomEnd"],function(e){this["on"+function(e){return e.substring(0,1).toLocaleUpperCase()+e.substring(1)}(e)]=e},S),angular.module("angular-iscroll",[]).directive("iscroll",e).provider("iScrollService",function(){var o={iScroll:{momentum:!0,mouseWheel:!0},directive:{initiallyEnabled:!c,asyncRefreshDelay:0,refreshInterval:!(e.$inject=["$rootScope","iScrollSignals"]),invokeApply:!1}};function e(r,n){var l={useIScroll:o.directive.initiallyEnabled,autoDetectedUseNativeScroll:c};function i(e){e||(l.useIScroll=!1),r.$emit(n.disabled)}function t(e){e||(l.useIScroll=!0),r.$emit(n.enabled)}return{defaults:o,state:l,versionCompare:s,platform:a,enable:t,disable:i,toggle:function(e){l.useIScroll^e?i(e):t(e)},refresh:function(e){r.$emit(n.refresh,e)}}}angular.forEach(S,function(e,r){this[r]=void 0},o.directive),this.useNativeScroll=c,this.platform=a,this.configureDefaults=function(e){angular.isDefined(e.directive)&&angular.extend(o.directive,e.directive),angular.isDefined(e.iScroll)&&angular.extend(o.iScroll,e.iScroll)},this.getDefaults=function(){return o},this.$get=e}).constant("iScrollSignals",{disabled:"iscroll:disabled",enabled:"iscroll:enabled",refresh:"iscroll:refresh"})});